** translate/wrap wmap3 likelihood

** polarization in ClData/ and binnedCl/ modules

** allow linear combinations of params

*** which methods should take the linear combination and which the real parameters?
*** how about package/unpackage?


 For sequences, (strings, lists, tuples), use the fact that empty
      sequences are false, so "if not seq" or "if seq" is preferable
      to "if len(seq)" or "if not len(seq)".
  [ but doesn't work for arrays ]

just make window fns win[nbin, ncl, lmax]

change mixedCase names to lower_with_underscores as per pep?

get rid of map in favor of list comprehension? (a la python regret)


** get rid of static methods in favor of module-level functions?

** may need to modify __init__ = blabla to def __init__(self, stuff) = self.blabla(stuff)

** rename Likelihood -> beamLikelihood?

** data.get_quadratic_form method which does A^T N^-1 B or A^T N^-1 A without full inverse if uncorrelated? (Otherwise *likelihood* needs to know which is appropriate)

** allow MCMC to take a sequence of likelihoods?
   
or allow likelihood to take a sequence of data?
   need to wrap lnLike, lnNorm in something like [for dat in self.data]

   (latter enforces the requirement that they all have the same model, which is crucial, but may be harder to deal with, and requires that every likelihood class do this. or could do with a lnLike1, lnNorm1 which are then wrapped only in the superclass?

** reorganize package/modules


**** finished from here down ****

** allow priors from the data? (e.g., reasonable limits on parameter values?)
or could subclass the model for specific cases?

need to make Likelihood take an *instance* of the model class?
can't do that -- need to make the xy ranges into *static class* variables.

 -- need to link the data, model, likelihood classes more strongly?

[done with classmethod]

** how to determine if an object is a vector or an array? len(asarray(obj))? 
    or try: l=len(obj)
       except TypeError: l=1
[use asarray(object).size() -- is there a better way?]

** generic gaussian data (d, sigma/sig2/noise_matrix) subclassed for
extra info (x, y for beams, bins for C_l , etc)
[done]

